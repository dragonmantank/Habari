<?php

/**
 * Habari Session class
 * Manages sessions for the PHP session routines
 *
 * @package habari
 */

class Session
{
	const SESSION_TIMEOUT = 1200; // 20 minutes

	/**
	 * Initialize the session handlers
	 */
	static function init()
	{
		session_set_save_handler(
			array('Session', 'open'),
			array('Session', 'close'),
			array('Session', 'read'),
			array('Session', 'write'),
			array('Session', 'destroy'),
			array('Session', 'gc')
		);
		register_shutdown_function('session_write_close');
		session_start();
		return true;
	}

	/**
	 * Executed when opening a session.
	 * Not useful for Habari
	 */
	static function open($save_path, $session_name)
	{
		// Does this function need to do anything?
		return true;
	}

	/**
	 * Executed when closing a session.
	 * Not useful for Habari
	 */
	static function close()
	{
		// Does this function need to do anything?
		return true;
	}

	/**
	 * Read session data from the database to return into the $_SESSION global.
	 * Verifies against a number of parameters for security purposes.
	 *
	 * @param string $session_id The id generated by PHP for teh session.
	 * @return string The retrieved session.
	 */
	static function read($session_id)
	{
		$session = DB::get_row('SELECT * FROM ' . DB::table('sessions') . ' WHERE token = ?', array($session_id));

		// Verify session exists
		if(!$session) {
			return false;
		}

		// Verify on the same subnet
		$subnet = ip2long($_SERVER['REMOTE_ADDR']) >> 8;
		if($session->subnet != $subnet) {
			DB::query('DELETE FROM ' . DB::table('sessions') . ' WHERE token = ?', array($session_id));
			return false;
		}

		// Verify expiry
		if( time() > $session->expires ) {
			DB::query('DELETE FROM ' . DB::table('sessions') . ' WHERE token = ?', array($session_id));
			return false;
		}

		// Verify User Agent
		if( $_SERVER['HTTP_USER_AGENT'] != $session->ua ) {
			DB::query('DELETE FROM ' . DB::table('sessions') . ' WHERE token = ?', array($session_id));
			return false;
		}

		return $session->data;
	}

	/**
	 * Commit $_SESSION data to the database for this user.
	 *
	 * @param string $session_id The PHP-generated session id
	 * @param string $data Data from session stored as a string
	 */
	static function write($session_id, $data)
	{
		// DB::update() checks if the record key exists, and inserts if not
		$record = array(
			'subnet' => ip2long($_SERVER['REMOTE_ADDR']) >> 8,
			'expires' => time() + self::SESSION_TIMEOUT,
			'ua' => $_SERVER['HTTP_USER_AGENT'],
			'data' => $data,
		);
		DB::update(
			DB::table('sessions'),
			$record,
			array('token' => $session_id)
		);
	}

	/**
	 * Destroy stored session data by session id
	 *
	 * @param string $session_id The PHP generated session id
	 * @return
	 */
	static function destroy($session_id)
	{
		DB::query('DELETE FROM ' . DB::table('sessions') . ' WHERE token = ?', array($session_id));
		return true;
	}

	/**
	 * Session garbage collection deletes expired sessions
	 *
	 * @param mixed $max_lifetime Unused
	 */
	static function gc($max_lifetime)
	{
		DB::query('DELETE FROM ' . DB::table('sessions') . ' WHERE expires < ?', array(time()));
		return true;
	}

	/**
	 * Sets the user_id attached to the current session
	 *
	 * @param integer $user_id The user id of the current user
	 */
	static function set_userid($user_id)
	{
		DB::query('UPDATE ' . DB::table('sessions') . ' SET user_id = ? WHERE token = ?', array($user_id, session_id()));
	}


	/**
	 * Clear the user_id attached to the current session
	 */
	static function clear_userid()
	{
		DB::query('UPDATE ' . DB::table('sessions') . ' SET user_id = NULL WHERE token = ?', array(session_id()));
	}

}

?>