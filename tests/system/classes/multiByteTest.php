<?php
require_once dirname( dirname( dirname( __FILE__ ) ) ) . DIRECTORY_SEPARATOR . 'phpunit_bootstrap.php';

/**
 * Test class for MultiByte.
 * Generated by PHPUnit on 2010-03-10 at 11:03:42.
 */
class system_classes_MultiByteTest extends PHPUnit_Framework_TestCase {

//	static $test_str = 'Iñtërnâtiônàlizætiøn';
	static $test_str = 'n2â7t Iñtërnâtiônàlizætiøn l13izæ42tiøn';
	static $test_str_slug = 'n2â7t Iñtërnâtiônàlizætiøn l13izæ42tiøn';
	static $test_str_slug_asc = 'fasfgreig rr23 34vfg9';
//	static $test_str = 'Track';
//	static $test_str = '汉字测试';
//	static $test_str = 'بما في ذلك الكلمات المستخدمة في صفحات التيكت والويكي';

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 *
	 * @access protected
	 */
	protected function setUp()
	{
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 *
	 * @access protected
	 */
	protected function tearDown()
	{
	}

	public function testHab_encoding()
	{
		$this->assertEquals( MultiByte::hab_encoding(), 'UTF-8' );
	}

	/**
	 * @todo Implement testLibrary().
	 */
	public function testLibrary()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	public function testConvert_encoding()
	{
		$this->assertEquals( MultiByte::convert_encoding( self::$test_str ), mb_convert_encoding( self::$test_str, 'UTF-8', mb_detect_encoding( self::$test_str ) ) );

		$this->assertEquals( MultiByte::convert_encoding( self::$test_str, 'ASCII' ), mb_convert_encoding( self::$test_str, 'ASCII', mb_detect_encoding( self::$test_str ) ) );
	}

	public function testDetect_encoding()
	{
		$this->assertEquals( MultiByte::detect_encoding( self::$test_str ), mb_detect_encoding( self::$test_str ) );
	}

	public function testSubstr()
	{
		$this->assertEquals( MultiByte::substr( self::$test_str, 1, 3 ), mb_substr( self::$test_str, 1, 3 ) );
		$this->assertEquals( MultiByte::substr( self::$test_str, 1, 3 ), mb_substr( self::$test_str, 1, 3, mb_detect_encoding( self::$test_str ) ) );
		$this->assertEquals( MultiByte::substr( self::$test_str, 5 ), mb_substr( self::$test_str, 5 ) );
	}

	public function testStrlen()
	{
		$this->assertEquals( MultiByte::strlen( self::$test_str ), mb_strlen( self::$test_str, mb_detect_encoding( self::$test_str ) ) );
	}

	public function testStrtolower()
	{
		$this->assertEquals( MultiByte::strtolower( self::$test_str ), mb_strtolower( mb_convert_encoding(self::$test_str, 'UTF-8', mb_detect_encoding( self::$test_str ) ), 'UTF-8' ) );
	}

	public function testStrtoupper()
	{
		$this->assertEquals( MultiByte::strtoupper( self::$test_str ), mb_strtoupper( mb_convert_encoding(self::$test_str, 'UTF-8', mb_detect_encoding( self::$test_str ) ), 'UTF-8' ) );
	}

	/**
	 * @todo Implement testValid_data().
	 */
	public function testValid_data()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}
}
?>
